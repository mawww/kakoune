= Execute-keys and Evaluate-commands

*execute-keys* [<switches>] <key> ...::
    Run keys as if they were pressed.

*evaluate-commands* [<switches>] <command> ...::
    Evaluate specified commands as if they were entered into the command
    prompt.

By default, the execution of both commands happens within the context of
the current client, and stops when the last key/command is reached or an
error occurs.

Without the *-save-regs* switch, *execute-keys* saves the following registers, which
are then restored when the keys have been executed: */*, *"*, *|*, *^*,
*@*, *:*. *evaluate-commands* doesn't save any registers by default.
(See <<registers#,`:doc registers`>>)

== Switches for both commands

*-client* <names>::
    Execute in the context of each client specified in the comma separated
    list *names*. '\*' can be used as *names* to iterate overall clients.

*-try-client* <name>::
    Execute in the context of the client *name* if such client exists,
    or else in the current context.

*-draft*::
    Execute in a copy of the context of the selected client. Modifications to
    the selections or input state will not affect the client. This permits
    making modifications to the buffer without modifying the userâ€™s
    selection.

*-itersel*::
    Execute once per selection, each having its own context. This prevents
    situations where selections get merged.

*-buffer* <names>::
    Execute in the context of each buffer specified in the comma separated
    list *names*. '\*' can be used as *names* to iterate over all non-debug
    buffers.
    (See <<buffers#debug-buffers, `:doc buffers`>>)

*-save-regs* <regs>::
    *regs* is a string of registers to be restored after execution (overwrites
    the list of registers saved by default).

== Switches specific to *evaluate-commands*

*-no-hooks*::
    Disable hook execution while executing the keys/commands.
    (See <<hooks#disabling-hooks,`:doc hooks`>>)

*-verbatim*::
    Don't reparse and split positional arguments. Forward them exactly
    as specified.

== Switches specific to *execute-keys*

*-with-maps*::
    Use a custom key mapping instead of the built-in one.
    (See <<mapping#,`:doc mapping`>>)

*-with-hooks*::
    Execute keys and trigger existing hooks.
    (See <<hooks#,`:doc hooks`>>)

== Local scope in *evaluate-commands*

When using *evaluate-commands* a new scope, named `local` is inserted.
See <<scopes#,`:doc scopes`>>

== Expansions in *evaluate-commands*

When using evaluate-commands to get expansion values (see <<expansions#,`:doc expansions`>>),
care must be taken to get the desired values. In order to properly expand expansions
in the target context, expansions must be wrapped in single quotes to avoid expanding
them in the current context. See <<expansions#,`:doc expansions`>> for an explanation
on how quoting affects expansions.

For example, if you have two Kakoune clients (client0 and client1) and you want to
print `%val{client}` of the second client from the first client to the
<<buffers#debug-buffers,*debug* buffer>>, you would run this command
from the first client:

---
evaluate-commands -client client1 -- echo -debug '%val{client}'
---

This will print "client1" to the debug buffer. Notice the single quotes
around the expansion. If you were to omit them, like so:

---
evaluate-commands -client client1 -- echo -debug %val{client}
---

It would print "client0" instead, because Kakoune has expanded it before
*evaluate-commands* has run.
