    fn foo<T>(x: T)
    where
        T: Debug
    {

    pub async fn foo<T>(x: T)
    where
        T: Debug
    {

    pub(in std::fmt) const unsafe extern "C" fn foo<T>(x: T)
    where
        T: Debug
    {

    fn foo<T>(x: T) where T: Debug {

    impl<T> X for T
    where
        T: Debug
    {

    impl<T> X for T where T: Debug {

    struct X<T>
    where
        T: Debug
    {

    pub(crate) struct X<T>
    where
        T: Debug
    {

    struct X<T> where T: Debug {

    enum X<T>
    where
        T: Debug
    {

    enum X<T> where T: Debug {

    union X<T>
    where
        T: Debug
    {

    union X<T> where T: Debug {

    if foo()
        && bar()
    {

    for x in group
        .iter()
        .sorted_by(|a, b| Ord::cmp(&a.0, &b.0))
    {

